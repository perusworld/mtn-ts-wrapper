/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MTNErrorResponse,
  MTNTokenBalance,
  MTNTokenOperation,
} from '../models/index';
import {
    MTNErrorResponseFromJSON,
    MTNErrorResponseToJSON,
    MTNTokenBalanceFromJSON,
    MTNTokenBalanceToJSON,
    MTNTokenOperationFromJSON,
    WrappedMTNTokenOperationToJSON,
} from '../models/index';

export interface GetBalancesRequest {
    ica: string;
    mTNTokenBalance: Omit<MTNTokenBalance, 'balance'>;
}

export interface GetOperationRequest {
    ica: string;
    operationId: string;
}

export interface SubmitOperationRequest {
    ica: string;
    idempotencyKey: string;
    mTNTokenOperation: Omit<MTNTokenOperation, 'operationId'|'status'|'blockchainTransactions'>;
}

/**
 * 
 */
export class TokenManagementApi extends runtime.BaseAPI {

    /**
     * This endpoint allows a consumer to retrieve the token balance for any crypto address or total supply of tokens. Request is expected to be encrypted.
     * Retrieve token balance.
     */
    async getBalancesRaw(requestParameters: GetBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNTokenBalance>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getBalances().'
            );
        }

        if (requestParameters['mTNTokenBalance'] == null) {
            throw new runtime.RequiredError(
                'mTNTokenBalance',
                'Required parameter "mTNTokenBalance" was null or undefined when calling getBalances().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/token-balances`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MTNTokenBalanceToJSON(requestParameters['mTNTokenBalance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNTokenBalanceFromJSON(jsonValue));
    }

    /**
     * This endpoint allows a consumer to retrieve the token balance for any crypto address or total supply of tokens. Request is expected to be encrypted.
     * Retrieve token balance.
     */
    async getBalances(requestParameters: GetBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNTokenBalance> {
        const response = await this.getBalancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows a consumer to retrieve details of a token operation. Response is expected to be encrypted.
     * Retrieve details of token operation.
     */
    async getOperationRaw(requestParameters: GetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNTokenOperation>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getOperation().'
            );
        }

        if (requestParameters['operationId'] == null) {
            throw new runtime.RequiredError(
                'operationId',
                'Required parameter "operationId" was null or undefined when calling getOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/token-operations/{operation_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"operation_id"}}`, encodeURIComponent(String(requestParameters['operationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNTokenOperationFromJSON(jsonValue));
    }

    /**
     * This endpoint allows a consumer to retrieve details of a token operation. Response is expected to be encrypted.
     * Retrieve details of token operation.
     */
    async getOperation(requestParameters: GetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNTokenOperation> {
        const response = await this.getOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows a consumer to submit an operation to either mint, transfer or burn tokens. Request and response are expected to be encrypted.
     * Submit token operation.
     */
    async submitOperationRaw(requestParameters: SubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNTokenOperation>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling submitOperation().'
            );
        }

        if (requestParameters['idempotencyKey'] == null) {
            throw new runtime.RequiredError(
                'idempotencyKey',
                'Required parameter "idempotencyKey" was null or undefined when calling submitOperation().'
            );
        }

        if (requestParameters['mTNTokenOperation'] == null) {
            throw new runtime.RequiredError(
                'mTNTokenOperation',
                'Required parameter "mTNTokenOperation" was null or undefined when calling submitOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['idempotencyKey'] != null) {
            headerParameters['Idempotency-Key'] = String(requestParameters['idempotencyKey']);
        }

        const response = await this.request({
            path: `/customers/{ica}/token-operations`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WrappedMTNTokenOperationToJSON(requestParameters['mTNTokenOperation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNTokenOperationFromJSON(jsonValue));
    }

    /**
     * This endpoint allows a consumer to submit an operation to either mint, transfer or burn tokens. Request and response are expected to be encrypted.
     * Submit token operation.
     */
    async submitOperation(requestParameters: SubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNTokenOperation> {
        const response = await this.submitOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
