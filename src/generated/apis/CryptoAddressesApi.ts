/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MTNCryptoAddress,
  MTNErrorResponse,
} from '../models/index';
import {
    MTNCryptoAddressFromJSON,
    MTNCryptoAddressToJSON,
    MTNErrorResponseFromJSON,
    MTNErrorResponseToJSON,
} from '../models/index';

export interface AddCryptoAddressRequest {
    ica: string;
    mTNCryptoAddress: Omit<MTNCryptoAddress, 'cryptoAddressId'|'status'|'createdDate'|'updatedDate'>;
}

export interface DecommissionCryptoAddressRequest {
    ica: string;
    cryptoAddressId: string;
}

export interface GetCryptoAddressRequest {
    ica: string;
    cryptoAddressId: string;
}

export interface UpdateCryptoAddressRequest {
    ica: string;
    cryptoAddressId: string;
    mTNCryptoAddress: Omit<MTNCryptoAddress, 'cryptoAddressId'|'status'|'createdDate'|'updatedDate'>;
}

/**
 * 
 */
export class CryptoAddressesApi extends runtime.BaseAPI {

    /**
     * This endpoint allows for adding a preferred crypto address for a given account alias. Request and response are expected to be encrypted.
     * Adds a preferred crypto address for an account.
     */
    async addCryptoAddressRaw(requestParameters: AddCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNCryptoAddress>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling addCryptoAddress().'
            );
        }

        if (requestParameters['mTNCryptoAddress'] == null) {
            throw new runtime.RequiredError(
                'mTNCryptoAddress',
                'Required parameter "mTNCryptoAddress" was null or undefined when calling addCryptoAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/crypto-addresses`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MTNCryptoAddressToJSON(requestParameters['mTNCryptoAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNCryptoAddressFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for adding a preferred crypto address for a given account alias. Request and response are expected to be encrypted.
     * Adds a preferred crypto address for an account.
     */
    async addCryptoAddress(requestParameters: AddCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNCryptoAddress> {
        const response = await this.addCryptoAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for decommissioning a crypto address.
     * Decommissions a crypto address.
     */
    async decommissionCryptoAddressRaw(requestParameters: DecommissionCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling decommissionCryptoAddress().'
            );
        }

        if (requestParameters['cryptoAddressId'] == null) {
            throw new runtime.RequiredError(
                'cryptoAddressId',
                'Required parameter "cryptoAddressId" was null or undefined when calling decommissionCryptoAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/crypto-addresses/{crypto_address_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"crypto_address_id"}}`, encodeURIComponent(String(requestParameters['cryptoAddressId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows for decommissioning a crypto address.
     * Decommissions a crypto address.
     */
    async decommissionCryptoAddress(requestParameters: DecommissionCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.decommissionCryptoAddressRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows for getting details of a crypto address. Response is expected to be encrypted.
     * Gets a crypto address.
     */
    async getCryptoAddressRaw(requestParameters: GetCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNCryptoAddress>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getCryptoAddress().'
            );
        }

        if (requestParameters['cryptoAddressId'] == null) {
            throw new runtime.RequiredError(
                'cryptoAddressId',
                'Required parameter "cryptoAddressId" was null or undefined when calling getCryptoAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/crypto-addresses/{crypto_address_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"crypto_address_id"}}`, encodeURIComponent(String(requestParameters['cryptoAddressId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNCryptoAddressFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for getting details of a crypto address. Response is expected to be encrypted.
     * Gets a crypto address.
     */
    async getCryptoAddress(requestParameters: GetCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNCryptoAddress> {
        const response = await this.getCryptoAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for updating a crypto address. Request is expected to be encrypted.
     * Updates a crypto address.
     */
    async updateCryptoAddressRaw(requestParameters: UpdateCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling updateCryptoAddress().'
            );
        }

        if (requestParameters['cryptoAddressId'] == null) {
            throw new runtime.RequiredError(
                'cryptoAddressId',
                'Required parameter "cryptoAddressId" was null or undefined when calling updateCryptoAddress().'
            );
        }

        if (requestParameters['mTNCryptoAddress'] == null) {
            throw new runtime.RequiredError(
                'mTNCryptoAddress',
                'Required parameter "mTNCryptoAddress" was null or undefined when calling updateCryptoAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/crypto-addresses/{crypto_address_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"crypto_address_id"}}`, encodeURIComponent(String(requestParameters['cryptoAddressId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNCryptoAddressToJSON(requestParameters['mTNCryptoAddress']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows for updating a crypto address. Request is expected to be encrypted.
     * Updates a crypto address.
     */
    async updateCryptoAddress(requestParameters: UpdateCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCryptoAddressRaw(requestParameters, initOverrides);
    }

}
