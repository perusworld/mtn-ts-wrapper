/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MTNAccount,
  MTNAccountSearch,
  MTNErrorResponse,
} from '../models/index';
import {
    MTNAccountFromJSON,
    MTNAccountToJSON,
    MTNAccountSearchFromJSON,
    MTNAccountSearchToJSON,
    MTNErrorResponseFromJSON,
    MTNErrorResponseToJSON,
} from '../models/index';

export interface AccountPostRequest {
    ica: string;
    mTNAccount: Omit<MTNAccount, 'balances'|'cryptoAddresses'|'createdDate'|'updatedDate'>;
}

export interface AccountSearchRequest {
    ica: string;
    mTNAccountSearch: MTNAccountSearch;
}

export interface AccountUpdateRequest {
    ica: string;
    mTNAccount: Omit<MTNAccount, 'balances'|'cryptoAddresses'|'createdDate'|'updatedDate'>;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * This endpoint allows a financial institution and virtual asset service providers (VASP) to register its consumer accounts in Crypto Source. Request and response are expected to be encrypted.
     * Register a new consumer account identity.
     */
    async accountPostRaw(requestParameters: AccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNAccount>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling accountPost().'
            );
        }

        if (requestParameters['mTNAccount'] == null) {
            throw new runtime.RequiredError(
                'mTNAccount',
                'Required parameter "mTNAccount" was null or undefined when calling accountPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/accounts`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MTNAccountToJSON(requestParameters['mTNAccount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNAccountFromJSON(jsonValue));
    }

    /**
     * This endpoint allows a financial institution and virtual asset service providers (VASP) to register its consumer accounts in Crypto Source. Request and response are expected to be encrypted.
     * Register a new consumer account identity.
     */
    async accountPost(requestParameters: AccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNAccount> {
        const response = await this.accountPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for retrieving details on an existing account from Crypto Source. Request and response are expected to be encrypted.
     * Search for an account\'s details.
     */
    async accountSearchRaw(requestParameters: AccountSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MTNAccount>>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling accountSearch().'
            );
        }

        if (requestParameters['mTNAccountSearch'] == null) {
            throw new runtime.RequiredError(
                'mTNAccountSearch',
                'Required parameter "mTNAccountSearch" was null or undefined when calling accountSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/accounts/searches`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MTNAccountSearchToJSON(requestParameters['mTNAccountSearch']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MTNAccountFromJSON));
    }

    /**
     * This endpoint allows for retrieving details on an existing account from Crypto Source. Request and response are expected to be encrypted.
     * Search for an account\'s details.
     */
    async accountSearch(requestParameters: AccountSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MTNAccount>> {
        const response = await this.accountSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for updating the account status of a given account alias. Request is expected to be encrypted.
     * Updates an account.
     */
    async accountUpdateRaw(requestParameters: AccountUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling accountUpdate().'
            );
        }

        if (requestParameters['mTNAccount'] == null) {
            throw new runtime.RequiredError(
                'mTNAccount',
                'Required parameter "mTNAccount" was null or undefined when calling accountUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/accounts`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNAccountToJSON(requestParameters['mTNAccount']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows for updating the account status of a given account alias. Request is expected to be encrypted.
     * Updates an account.
     */
    async accountUpdate(requestParameters: AccountUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountUpdateRaw(requestParameters, initOverrides);
    }

}
