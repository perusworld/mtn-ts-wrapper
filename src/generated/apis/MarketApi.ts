/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MTNErrorResponse,
  MTNGetHistoricalPricesHistoricalPricesFilterParameter,
  MTNGetQuotesQuoteFilterParameter,
  MTNHistoricalPrices,
  MTNPrice,
  MTNQuote,
} from '../models/index';
import {
    MTNErrorResponseFromJSON,
    MTNErrorResponseToJSON,
    MTNGetHistoricalPricesHistoricalPricesFilterParameterFromJSON,
    MTNGetHistoricalPricesHistoricalPricesFilterParameterToJSON,
    MTNGetQuotesQuoteFilterParameterFromJSON,
    MTNGetQuotesQuoteFilterParameterToJSON,
    MTNHistoricalPricesFromJSON,
    MTNHistoricalPricesToJSON,
    MTNPriceFromJSON,
    MTNPriceToJSON,
    MTNQuoteFromJSON,
    MTNQuoteToJSON,
} from '../models/index';

export interface GetHistoricalPricesRequest {
    ica: string;
    historicalPricesFilter: Omit<MTNGetHistoricalPricesHistoricalPricesFilterParameter, 'startDate'|'endDate'>;
}

export interface GetPricesRequest {
    ica: string;
    asset?: Array<string>;
}

export interface GetQuotesRequest {
    ica: string;
    quoteFilter: MTNGetQuotesQuoteFilterParameter;
}

/**
 * 
 */
export class MarketApi extends runtime.BaseAPI {

    /**
     * This endpoint allows retrieving Historical prices.
     * Retrieve Historical prices.
     */
    async getHistoricalPricesRaw(requestParameters: GetHistoricalPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNHistoricalPrices>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getHistoricalPrices().'
            );
        }

        if (requestParameters['historicalPricesFilter'] == null) {
            throw new runtime.RequiredError(
                'historicalPricesFilter',
                'Required parameter "historicalPricesFilter" was null or undefined when calling getHistoricalPrices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['historicalPricesFilter'] != null) {
            queryParameters['historical_prices_filter'] = requestParameters['historicalPricesFilter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/historical-prices`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNHistoricalPricesFromJSON(jsonValue));
    }

    /**
     * This endpoint allows retrieving Historical prices.
     * Retrieve Historical prices.
     */
    async getHistoricalPrices(requestParameters: GetHistoricalPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNHistoricalPrices> {
        const response = await this.getHistoricalPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows retrieving prices for one or more markets.
     * Retrieve prices.
     */
    async getPricesRaw(requestParameters: GetPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MTNPrice>>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getPrices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['asset'] != null) {
            queryParameters['asset'] = requestParameters['asset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/prices`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MTNPriceFromJSON));
    }

    /**
     * This endpoint allows retrieving prices for one or more markets.
     * Retrieve prices.
     */
    async getPrices(requestParameters: GetPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MTNPrice>> {
        const response = await this.getPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint fetches latest quote for given currency and further criteria.
     * Retrieve latest quote.
     */
    async getQuotesRaw(requestParameters: GetQuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNQuote>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getQuotes().'
            );
        }

        if (requestParameters['quoteFilter'] == null) {
            throw new runtime.RequiredError(
                'quoteFilter',
                'Required parameter "quoteFilter" was null or undefined when calling getQuotes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['quoteFilter'] != null) {
            queryParameters['quote_filter'] = requestParameters['quoteFilter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/quotes`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNQuoteFromJSON(jsonValue));
    }

    /**
     * This endpoint fetches latest quote for given currency and further criteria.
     * Retrieve latest quote.
     */
    async getQuotes(requestParameters: GetQuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNQuote> {
        const response = await this.getQuotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
