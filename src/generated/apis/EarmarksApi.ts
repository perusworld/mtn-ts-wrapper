/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MTNEarmark,
  MTNEarmarks,
  MTNErrorResponse,
  MTNPayer,
} from '../models/index';
import {
    MTNEarmarkFromJSON,
    MTNEarmarkToJSON,
    MTNEarmarksFromJSON,
    MTNEarmarksToJSON,
    MTNErrorResponseFromJSON,
    MTNErrorResponseToJSON,
    MTNPayerFromJSON,
    MTNPayerToJSON,
} from '../models/index';

export interface EarmarkSearchRequest {
    ica: string;
    offset?: number;
    limit?: number;
    status?: string;
    sort?: string;
}

export interface GetEarmarkRequest {
    ica: string;
    earmarkId: string;
}

export interface PostEarmarkRequest {
    ica: string;
    mTNEarmark: Omit<MTNEarmark, 'earmarkId'|'status'|'expiryDate'|'executionDate'|'createdDate'|'lastUpdatedDate'|'createdBy'|'lastUpdatedBy'>;
}

export interface UpdateEarmarkRequest {
    ica: string;
    earmarkId: string;
    mTNEarmark: Omit<MTNEarmark, 'earmarkId'|'status'|'expiryDate'|'executionDate'|'createdDate'|'lastUpdatedDate'|'createdBy'|'lastUpdatedBy'>;
}

export interface UpdateEarmarkForCancelRequest {
    ica: string;
    earmarkId: string;
    mTNEarmark: Omit<MTNEarmark, 'earmarkId'|'status'|'expiryDate'|'executionDate'|'createdDate'|'lastUpdatedDate'|'createdBy'|'lastUpdatedBy'>;
}

export interface UpdateEarmarkForDepositsRequest {
    ica: string;
    earmarkId: string;
    mTNPayer: MTNPayer;
}

export interface UpdateEarmarkForReleaseRequest {
    ica: string;
    earmarkId: string;
    mTNEarmark: Omit<MTNEarmark, 'earmarkId'|'status'|'expiryDate'|'executionDate'|'createdDate'|'lastUpdatedDate'|'createdBy'|'lastUpdatedBy'>;
}

/**
 * 
 */
export class EarmarksApi extends runtime.BaseAPI {

    /**
     * This endpoint allows for retrieving details on existing earmarks from Crypto Source. The response is expected to be encrypted.
     * Retrieve earmarks details
     */
    async earmarkSearchRaw(requestParameters: EarmarkSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNEarmarks>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling earmarkSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/earmarks`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNEarmarksFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for retrieving details on existing earmarks from Crypto Source. The response is expected to be encrypted.
     * Retrieve earmarks details
     */
    async earmarkSearch(requestParameters: EarmarkSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNEarmarks> {
        const response = await this.earmarkSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for retrieving details of an earmark by using EarmarkId. The response is expected to be encrypted.
     * Retrieve an earmark by using earmarkId
     */
    async getEarmarkRaw(requestParameters: GetEarmarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNEarmark>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getEarmark().'
            );
        }

        if (requestParameters['earmarkId'] == null) {
            throw new runtime.RequiredError(
                'earmarkId',
                'Required parameter "earmarkId" was null or undefined when calling getEarmark().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/earmarks/{earmark_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNEarmarkFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for retrieving details of an earmark by using EarmarkId. The response is expected to be encrypted.
     * Retrieve an earmark by using earmarkId
     */
    async getEarmark(requestParameters: GetEarmarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNEarmark> {
        const response = await this.getEarmarkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for creating an earmark. Request and response are expected to be encrypted.
     * Creates an Earmark request
     */
    async postEarmarkRaw(requestParameters: PostEarmarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNEarmark>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling postEarmark().'
            );
        }

        if (requestParameters['mTNEarmark'] == null) {
            throw new runtime.RequiredError(
                'mTNEarmark',
                'Required parameter "mTNEarmark" was null or undefined when calling postEarmark().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/earmarks`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MTNEarmarkToJSON(requestParameters['mTNEarmark']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNEarmarkFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for creating an earmark. Request and response are expected to be encrypted.
     * Creates an Earmark request
     */
    async postEarmark(requestParameters: PostEarmarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNEarmark> {
        const response = await this.postEarmarkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Endpoint to update an earmark. Request is expected to be encrypted.
     * Update an earmark
     */
    async updateEarmarkRaw(requestParameters: UpdateEarmarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling updateEarmark().'
            );
        }

        if (requestParameters['earmarkId'] == null) {
            throw new runtime.RequiredError(
                'earmarkId',
                'Required parameter "earmarkId" was null or undefined when calling updateEarmark().'
            );
        }

        if (requestParameters['mTNEarmark'] == null) {
            throw new runtime.RequiredError(
                'mTNEarmark',
                'Required parameter "mTNEarmark" was null or undefined when calling updateEarmark().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/earmarks/{earmark_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNEarmarkToJSON(requestParameters['mTNEarmark']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint to update an earmark. Request is expected to be encrypted.
     * Update an earmark
     */
    async updateEarmark(requestParameters: UpdateEarmarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEarmarkRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to cancel an earmark with a status reason and a status description. Request is expected to be encrypted.
     * Request to cancel an earmark
     */
    async updateEarmarkForCancelRaw(requestParameters: UpdateEarmarkForCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling updateEarmarkForCancel().'
            );
        }

        if (requestParameters['earmarkId'] == null) {
            throw new runtime.RequiredError(
                'earmarkId',
                'Required parameter "earmarkId" was null or undefined when calling updateEarmarkForCancel().'
            );
        }

        if (requestParameters['mTNEarmark'] == null) {
            throw new runtime.RequiredError(
                'mTNEarmark',
                'Required parameter "mTNEarmark" was null or undefined when calling updateEarmarkForCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/earmarks/{earmark_id}/cancel`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNEarmarkToJSON(requestParameters['mTNEarmark']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to cancel an earmark with a status reason and a status description. Request is expected to be encrypted.
     * Request to cancel an earmark
     */
    async updateEarmarkForCancel(requestParameters: UpdateEarmarkForCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEarmarkForCancelRaw(requestParameters, initOverrides);
    }

    /**
     * Endpoint to update deposit with payer\'s account alias and request amount. Request is expected to be encrypted.
     * Deposit funds for an Earmark.
     */
    async updateEarmarkForDepositsRaw(requestParameters: UpdateEarmarkForDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling updateEarmarkForDeposits().'
            );
        }

        if (requestParameters['earmarkId'] == null) {
            throw new runtime.RequiredError(
                'earmarkId',
                'Required parameter "earmarkId" was null or undefined when calling updateEarmarkForDeposits().'
            );
        }

        if (requestParameters['mTNPayer'] == null) {
            throw new runtime.RequiredError(
                'mTNPayer',
                'Required parameter "mTNPayer" was null or undefined when calling updateEarmarkForDeposits().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/earmarks/{earmark_id}/deposits`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNPayerToJSON(requestParameters['mTNPayer']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint to update deposit with payer\'s account alias and request amount. Request is expected to be encrypted.
     * Deposit funds for an Earmark.
     */
    async updateEarmarkForDeposits(requestParameters: UpdateEarmarkForDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEarmarkForDepositsRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to release an earmark by providing reason code and description. Request is expected to be encrypted.
     * Request to release funds for an earmark
     */
    async updateEarmarkForReleaseRaw(requestParameters: UpdateEarmarkForReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling updateEarmarkForRelease().'
            );
        }

        if (requestParameters['earmarkId'] == null) {
            throw new runtime.RequiredError(
                'earmarkId',
                'Required parameter "earmarkId" was null or undefined when calling updateEarmarkForRelease().'
            );
        }

        if (requestParameters['mTNEarmark'] == null) {
            throw new runtime.RequiredError(
                'mTNEarmark',
                'Required parameter "mTNEarmark" was null or undefined when calling updateEarmarkForRelease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/earmarks/{earmark_id}/release`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNEarmarkToJSON(requestParameters['mTNEarmark']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to release an earmark by providing reason code and description. Request is expected to be encrypted.
     * Request to release funds for an earmark
     */
    async updateEarmarkForRelease(requestParameters: UpdateEarmarkForReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEarmarkForReleaseRaw(requestParameters, initOverrides);
    }

}
