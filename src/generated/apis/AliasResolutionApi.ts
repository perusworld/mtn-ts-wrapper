/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MTNAccountResolution,
  MTNAccountResolutions,
  MTNErrorResponse,
} from '../models/index';
import {
    MTNAccountResolutionFromJSON,
    MTNAccountResolutionToJSON,
    MTNAccountResolutionsFromJSON,
    MTNAccountResolutionsToJSON,
    MTNErrorResponseFromJSON,
    MTNErrorResponseToJSON,
} from '../models/index';

export interface GetAliasResolutionRequestRequest {
    ica: string;
    requestId: string;
}

export interface GetAliasResolutionRequestsRequest {
    ica: string;
    status?: string;
    offset?: number;
    limit?: number;
    sort?: string;
}

export interface ResolveAccountAliasRequest {
    ica: string;
    mTNAccountResolution: Omit<MTNAccountResolution, 'travelRuleTransferId'|'createdDate'|'updatedDate'>;
}

export interface UpdateAccountResolutionRequestRequest {
    ica: string;
    requestId: string;
    mTNAccountResolution: Omit<MTNAccountResolution, 'travelRuleTransferId'|'createdDate'|'updatedDate'>;
}

/**
 * 
 */
export class AliasResolutionApi extends runtime.BaseAPI {

    /**
     * This endpoint allows for retrieving details of an account resolution request. Response is expected to be encrypted.
     * Retrieve an account resolution request.
     */
    async getAliasResolutionRequestRaw(requestParameters: GetAliasResolutionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNAccountResolution>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getAliasResolutionRequest().'
            );
        }

        if (requestParameters['requestId'] == null) {
            throw new runtime.RequiredError(
                'requestId',
                'Required parameter "requestId" was null or undefined when calling getAliasResolutionRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/alias-resolutions/{request_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"request_id"}}`, encodeURIComponent(String(requestParameters['requestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNAccountResolutionFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for retrieving details of an account resolution request. Response is expected to be encrypted.
     * Retrieve an account resolution request.
     */
    async getAliasResolutionRequest(requestParameters: GetAliasResolutionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNAccountResolution> {
        const response = await this.getAliasResolutionRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for retrieving a list of account resolution requests where the calling VASP is the beneficiary. Response is expected to be encrypted.
     * Retrieve account resolution requests.
     */
    async getAliasResolutionRequestsRaw(requestParameters: GetAliasResolutionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNAccountResolutions>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getAliasResolutionRequests().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/alias-resolutions`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNAccountResolutionsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for retrieving a list of account resolution requests where the calling VASP is the beneficiary. Response is expected to be encrypted.
     * Retrieve account resolution requests.
     */
    async getAliasResolutionRequests(requestParameters: GetAliasResolutionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNAccountResolutions> {
        const response = await this.getAliasResolutionRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for creating a request to resolve crypto address for a given account alias. Request and response are expected to be encrypted.
     * Creates an account resolution request.
     */
    async resolveAccountAliasRaw(requestParameters: ResolveAccountAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNAccountResolution>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling resolveAccountAlias().'
            );
        }

        if (requestParameters['mTNAccountResolution'] == null) {
            throw new runtime.RequiredError(
                'mTNAccountResolution',
                'Required parameter "mTNAccountResolution" was null or undefined when calling resolveAccountAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/alias-resolutions`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MTNAccountResolutionToJSON(requestParameters['mTNAccountResolution']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNAccountResolutionFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for creating a request to resolve crypto address for a given account alias. Request and response are expected to be encrypted.
     * Creates an account resolution request.
     */
    async resolveAccountAlias(requestParameters: ResolveAccountAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNAccountResolution> {
        const response = await this.resolveAccountAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Endpoint to update the account resolution request status and provide originator and beneficiary details at different states. Request is expected to be encrypted.
     * Update an account resolution request.
     */
    async updateAccountResolutionRequestRaw(requestParameters: UpdateAccountResolutionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling updateAccountResolutionRequest().'
            );
        }

        if (requestParameters['requestId'] == null) {
            throw new runtime.RequiredError(
                'requestId',
                'Required parameter "requestId" was null or undefined when calling updateAccountResolutionRequest().'
            );
        }

        if (requestParameters['mTNAccountResolution'] == null) {
            throw new runtime.RequiredError(
                'mTNAccountResolution',
                'Required parameter "mTNAccountResolution" was null or undefined when calling updateAccountResolutionRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/alias-resolutions/{request_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"request_id"}}`, encodeURIComponent(String(requestParameters['requestId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNAccountResolutionToJSON(requestParameters['mTNAccountResolution']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint to update the account resolution request status and provide originator and beneficiary details at different states. Request is expected to be encrypted.
     * Update an account resolution request.
     */
    async updateAccountResolutionRequest(requestParameters: UpdateAccountResolutionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAccountResolutionRequestRaw(requestParameters, initOverrides);
    }

}
