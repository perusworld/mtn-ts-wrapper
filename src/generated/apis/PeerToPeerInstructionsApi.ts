/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MTNErrorResponse,
  MTNP2PInstruction,
  MTNP2PInstructions,
} from '../models/index';
import {
    MTNErrorResponseFromJSON,
    MTNErrorResponseToJSON,
    MTNP2PInstructionFromJSON,
    MTNP2PInstructionToJSON,
    MTNP2PInstructionsFromJSON,
    MTNP2PInstructionsToJSON,
} from '../models/index';

export interface GetP2PInstructionRequestRequest {
    ica: string;
    instructionId: string;
}

export interface GetP2PInstructionRequestsRequest {
    ica: string;
    status?: string;
    offset?: number;
    limit?: number;
    sort?: string;
    requestType?: string;
}

export interface ResolveP2PInstructionRequestRequest {
    ica: string;
    mTNP2PInstruction: Omit<MTNP2PInstruction, 'travelRuleExchangeId'|'createdDate'|'updatedDate'>;
}

export interface UpdateP2PInstructionRequestRequest {
    ica: string;
    instructionId: string;
    mTNP2PInstruction: Omit<MTNP2PInstruction, 'travelRuleExchangeId'|'createdDate'|'updatedDate'>;
}

/**
 * 
 */
export class PeerToPeerInstructionsApi extends runtime.BaseAPI {

    /**
     * This endpoint allows for retrieving details of a P2P instruction request. Response is expected to be encrypted.
     * Retrieve a P2P instruction request.
     */
    async getP2PInstructionRequestRaw(requestParameters: GetP2PInstructionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNP2PInstruction>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getP2PInstructionRequest().'
            );
        }

        if (requestParameters['instructionId'] == null) {
            throw new runtime.RequiredError(
                'instructionId',
                'Required parameter "instructionId" was null or undefined when calling getP2PInstructionRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/peer-to-peer-instructions/{instruction_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"instruction_id"}}`, encodeURIComponent(String(requestParameters['instructionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNP2PInstructionFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for retrieving details of a P2P instruction request. Response is expected to be encrypted.
     * Retrieve a P2P instruction request.
     */
    async getP2PInstructionRequest(requestParameters: GetP2PInstructionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNP2PInstruction> {
        const response = await this.getP2PInstructionRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for retrieving a list of P2P Instruction requests where the calling VASP is the beneficiary. Response is expected to be encrypted.
     * Retrieve P2P Instruction requests.
     */
    async getP2PInstructionRequestsRaw(requestParameters: GetP2PInstructionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNP2PInstructions>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling getP2PInstructionRequests().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['requestType'] != null) {
            queryParameters['request_type'] = requestParameters['requestType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{ica}/peer-to-peer-instructions`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNP2PInstructionsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for retrieving a list of P2P Instruction requests where the calling VASP is the beneficiary. Response is expected to be encrypted.
     * Retrieve P2P Instruction requests.
     */
    async getP2PInstructionRequests(requestParameters: GetP2PInstructionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNP2PInstructions> {
        const response = await this.getP2PInstructionRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows for creating an instruction to resolve crypto address and attestation for sending and receiving account aliases. Request and response are expected to be encrypted.
     * Creates a P2P instruction request.
     */
    async resolveP2PInstructionRequestRaw(requestParameters: ResolveP2PInstructionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNP2PInstruction>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling resolveP2PInstructionRequest().'
            );
        }

        if (requestParameters['mTNP2PInstruction'] == null) {
            throw new runtime.RequiredError(
                'mTNP2PInstruction',
                'Required parameter "mTNP2PInstruction" was null or undefined when calling resolveP2PInstructionRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/peer-to-peer-instructions`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MTNP2PInstructionToJSON(requestParameters['mTNP2PInstruction']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MTNP2PInstructionFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for creating an instruction to resolve crypto address and attestation for sending and receiving account aliases. Request and response are expected to be encrypted.
     * Creates a P2P instruction request.
     */
    async resolveP2PInstructionRequest(requestParameters: ResolveP2PInstructionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNP2PInstruction> {
        const response = await this.resolveP2PInstructionRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Endpoint to update the P2P instruction request status and provide originator and beneficiary details at different states. Request is expected to be encrypted.
     * Update a P2P instruction request.
     */
    async updateP2PInstructionRequestRaw(requestParameters: UpdateP2PInstructionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ica'] == null) {
            throw new runtime.RequiredError(
                'ica',
                'Required parameter "ica" was null or undefined when calling updateP2PInstructionRequest().'
            );
        }

        if (requestParameters['instructionId'] == null) {
            throw new runtime.RequiredError(
                'instructionId',
                'Required parameter "instructionId" was null or undefined when calling updateP2PInstructionRequest().'
            );
        }

        if (requestParameters['mTNP2PInstruction'] == null) {
            throw new runtime.RequiredError(
                'mTNP2PInstruction',
                'Required parameter "mTNP2PInstruction" was null or undefined when calling updateP2PInstructionRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{ica}/peer-to-peer-instructions/{instruction_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"instruction_id"}}`, encodeURIComponent(String(requestParameters['instructionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MTNP2PInstructionToJSON(requestParameters['mTNP2PInstruction']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint to update the P2P instruction request status and provide originator and beneficiary details at different states. Request is expected to be encrypted.
     * Update a P2P instruction request.
     */
    async updateP2PInstructionRequest(requestParameters: UpdateP2PInstructionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateP2PInstructionRequestRaw(requestParameters, initOverrides);
    }

}
