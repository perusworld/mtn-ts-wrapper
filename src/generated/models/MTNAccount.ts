/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MTNAssetBalance } from './MTNAssetBalance';
import {
    MTNAssetBalanceFromJSON,
    MTNAssetBalanceFromJSONTyped,
    MTNAssetBalanceToJSON,
} from './MTNAssetBalance';
import type { MTNCryptoAddress } from './MTNCryptoAddress';
import {
    MTNCryptoAddressFromJSON,
    MTNCryptoAddressFromJSONTyped,
    MTNCryptoAddressToJSON,
} from './MTNCryptoAddress';
import type { MTNStatusReasonInformation } from './MTNStatusReasonInformation';
import {
    MTNStatusReasonInformationFromJSON,
    MTNStatusReasonInformationFromJSONTyped,
    MTNStatusReasonInformationToJSON,
} from './MTNStatusReasonInformation';

/**
 * Account of a Consumer associated with a registered Customer.
 * @export
 * @interface MTNAccount
 */
export interface MTNAccount {
    /**
     * Consumer account identifier.
     * @type {string}
     * @memberof MTNAccount
     */
    accountAlias: string;
    /**
     * Status of account.
     * @type {string}
     * @memberof MTNAccount
     */
    status?: string;
    /**
     * More information regarding the status of the account.
     * @type {Array<MTNStatusReasonInformation>}
     * @memberof MTNAccount
     */
    statusReasonInformation?: Array<MTNStatusReasonInformation>;
    /**
     * List of asset balances.
     * @type {Array<MTNAssetBalance>}
     * @memberof MTNAccount
     */
    readonly balances?: Array<MTNAssetBalance>;
    /**
     * List of crypto addresses for account alias.
     * @type {Array<MTNCryptoAddress>}
     * @memberof MTNAccount
     */
    readonly cryptoAddresses?: Array<MTNCryptoAddress>;
    /**
     * Creation datetime in ISO8601 format
     * @type {Date}
     * @memberof MTNAccount
     */
    readonly createdDate?: Date;
    /**
     * Last updated datetime in ISO8601 format
     * @type {Date}
     * @memberof MTNAccount
     */
    readonly updatedDate?: Date;
}

/**
 * Check if a given object implements the MTNAccount interface.
 */
export function instanceOfMTNAccount(value: object): boolean {
    if (!('accountAlias' in value)) return false;
    return true;
}

export function MTNAccountFromJSON(json: any): MTNAccount {
    return MTNAccountFromJSONTyped(json, false);
}

export function MTNAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): MTNAccount {
    if (json == null) {
        return json;
    }
    return {
        
        'accountAlias': json['accountAlias'],
        'status': json['status'] == null ? undefined : json['status'],
        'statusReasonInformation': json['statusReasonInformation'] == null ? undefined : ((json['statusReasonInformation'] as Array<any>).map(MTNStatusReasonInformationFromJSON)),
        'balances': json['balances'] == null ? undefined : ((json['balances'] as Array<any>).map(MTNAssetBalanceFromJSON)),
        'cryptoAddresses': json['cryptoAddresses'] == null ? undefined : ((json['cryptoAddresses'] as Array<any>).map(MTNCryptoAddressFromJSON)),
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'updatedDate': json['updatedDate'] == null ? undefined : (new Date(json['updatedDate'])),
    };
}

export function MTNAccountToJSON(value?: Omit<MTNAccount, 'balances'|'cryptoAddresses'|'createdDate'|'updatedDate'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'accountAlias': value['accountAlias'],
        'status': value['status'],
        'statusReasonInformation': value['statusReasonInformation'] == null ? undefined : ((value['statusReasonInformation'] as Array<any>).map(MTNStatusReasonInformationToJSON)),
    };
}

