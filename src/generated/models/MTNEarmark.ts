/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MTNPayer } from './MTNPayer';
import {
    MTNPayerFromJSON,
    MTNPayerFromJSONTyped,
    MTNPayerToJSON,
} from './MTNPayer';
import type { MTNRecipient } from './MTNRecipient';
import {
    MTNRecipientFromJSON,
    MTNRecipientFromJSONTyped,
    MTNRecipientToJSON,
} from './MTNRecipient';
import type { MTNRelease } from './MTNRelease';
import {
    MTNReleaseFromJSON,
    MTNReleaseFromJSONTyped,
    MTNReleaseToJSON,
} from './MTNRelease';
import type { MTNStatusReasonInformation } from './MTNStatusReasonInformation';
import {
    MTNStatusReasonInformationFromJSON,
    MTNStatusReasonInformationFromJSONTyped,
    MTNStatusReasonInformationToJSON,
} from './MTNStatusReasonInformation';

/**
 * 
 * @export
 * @interface MTNEarmark
 */
export interface MTNEarmark {
    /**
     * Unique Identifier for earmark
     * @type {string}
     * @memberof MTNEarmark
     */
    readonly earmarkId?: string;
    /**
     * The externalReference for Earmark
     * @type {string}
     * @memberof MTNEarmark
     */
    externalReference?: string;
    /**
     * The amount of asset.
     * @type {number}
     * @memberof MTNEarmark
     */
    amount?: number;
    /**
     * More details on the error.
     * @type {Array<MTNStatusReasonInformation>}
     * @memberof MTNEarmark
     */
    statusReasonInformation?: Array<MTNStatusReasonInformation>;
    /**
     * Status of the Earmark operation. Valid values - RECEIVED, INITIATED, RELEASE_INITIATED,READY_FOR_RELEASE, PARTIALLY_EXECUTED, EXECUTED, CANCELLING, CANCELLED, EXPIRING, EXPIRED, FAILED
     * @type {string}
     * @memberof MTNEarmark
     */
    readonly status?: string;
    /**
     * Expiry datetime in ISO8601 format.
     * @type {Date}
     * @memberof MTNEarmark
     */
    readonly expiryDate?: Date;
    /**
     * Execution datetime in ISO8601 format.
     * @type {Date}
     * @memberof MTNEarmark
     */
    readonly executionDate?: Date;
    /**
     * The type of payment instruction associated with the report.
     * @type {string}
     * @memberof MTNEarmark
     */
    type?: string;
    /**
     * 
     * @type {Array<MTNPayer>}
     * @memberof MTNEarmark
     */
    payers?: Array<MTNPayer>;
    /**
     * 
     * @type {Array<MTNRecipient>}
     * @memberof MTNEarmark
     */
    recipients?: Array<MTNRecipient>;
    /**
     * The list of releases in which to distribute tokens.
     * @type {Array<MTNRelease>}
     * @memberof MTNEarmark
     */
    releases?: Array<MTNRelease>;
    /**
     * Creation datetime in ISO8601 format
     * @type {Date}
     * @memberof MTNEarmark
     */
    readonly createdDate?: Date;
    /**
     * Last updated datetime in ISO8601 format
     * @type {Date}
     * @memberof MTNEarmark
     */
    readonly lastUpdatedDate?: Date;
    /**
     * The created by user username.
     * @type {string}
     * @memberof MTNEarmark
     */
    readonly createdBy?: string;
    /**
     * Last updated by username.
     * @type {string}
     * @memberof MTNEarmark
     */
    readonly lastUpdatedBy?: string;
}

/**
 * Check if a given object implements the MTNEarmark interface.
 */
export function instanceOfMTNEarmark(value: object): boolean {
    return true;
}

export function MTNEarmarkFromJSON(json: any): MTNEarmark {
    return MTNEarmarkFromJSONTyped(json, false);
}

export function MTNEarmarkFromJSONTyped(json: any, ignoreDiscriminator: boolean): MTNEarmark {
    if (json == null) {
        return json;
    }
    return {
        
        'earmarkId': json['earmarkId'] == null ? undefined : json['earmarkId'],
        'externalReference': json['externalReference'] == null ? undefined : json['externalReference'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'statusReasonInformation': json['statusReasonInformation'] == null ? undefined : ((json['statusReasonInformation'] as Array<any>).map(MTNStatusReasonInformationFromJSON)),
        'status': json['status'] == null ? undefined : json['status'],
        'expiryDate': json['expiryDate'] == null ? undefined : (new Date(json['expiryDate'])),
        'executionDate': json['executionDate'] == null ? undefined : (new Date(json['executionDate'])),
        'type': json['type'] == null ? undefined : json['type'],
        'payers': json['payers'] == null ? undefined : ((json['payers'] as Array<any>).map(MTNPayerFromJSON)),
        'recipients': json['recipients'] == null ? undefined : ((json['recipients'] as Array<any>).map(MTNRecipientFromJSON)),
        'releases': json['releases'] == null ? undefined : ((json['releases'] as Array<any>).map(MTNReleaseFromJSON)),
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'lastUpdatedDate': json['lastUpdatedDate'] == null ? undefined : (new Date(json['lastUpdatedDate'])),
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'lastUpdatedBy': json['lastUpdatedBy'] == null ? undefined : json['lastUpdatedBy'],
    };
}

export function MTNEarmarkToJSON(value?: Omit<MTNEarmark, 'earmarkId'|'status'|'expiryDate'|'executionDate'|'createdDate'|'lastUpdatedDate'|'createdBy'|'lastUpdatedBy'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'externalReference': value['externalReference'],
        'amount': value['amount'],
        'statusReasonInformation': value['statusReasonInformation'] == null ? undefined : ((value['statusReasonInformation'] as Array<any>).map(MTNStatusReasonInformationToJSON)),
        'type': value['type'],
        'payers': value['payers'] == null ? undefined : ((value['payers'] as Array<any>).map(MTNPayerToJSON)),
        'recipients': value['recipients'] == null ? undefined : ((value['recipients'] as Array<any>).map(MTNRecipientToJSON)),
        'releases': value['releases'] == null ? undefined : ((value['releases'] as Array<any>).map(MTNReleaseToJSON)),
    };
}

