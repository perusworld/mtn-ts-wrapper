/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MTNStatusReasonInformation } from './MTNStatusReasonInformation';
import {
    MTNStatusReasonInformationFromJSON,
    MTNStatusReasonInformationFromJSONTyped,
    MTNStatusReasonInformationToJSON,
} from './MTNStatusReasonInformation';

import {
     MTNAccountResolutionP2PInstructionFromJSONTyped,
     MTNAttestationP2PInstructionFromJSONTyped
} from './index';

/**
 * A basic Peer to Peer POST payload
 * @export
 * @interface MTNP2PInstruction
 */
export interface MTNP2PInstruction {
    /**
     * Payment Instruction type.
     * @type {string}
     * @memberof MTNP2PInstruction
     */
    requestType?: string;
    /**
     * unique id for the P2P lookup request.
     * @type {string}
     * @memberof MTNP2PInstruction
     */
    instructionId?: string;
    /**
     * Quantity of Asset for the Account Resolution request, such as the quantity of BTC to be transferred.
     * @type {number}
     * @memberof MTNP2PInstruction
     */
    quantity?: number;
    /**
     * The status of an Alias Resolution request.
     * @type {string}
     * @memberof MTNP2PInstruction
     */
    status?: string;
    /**
     * More details on the error.
     * @type {Array<MTNStatusReasonInformation>}
     * @memberof MTNP2PInstruction
     */
    statusReasonInformation?: Array<MTNStatusReasonInformation>;
    /**
     * The hash of a blockchain.
     * @type {string}
     * @memberof MTNP2PInstruction
     */
    blockchainTxnHash?: string;
    /**
     * The exchange identifier received from CipherTrace.
     * @type {string}
     * @memberof MTNP2PInstruction
     */
    readonly travelRuleExchangeId?: string;
    /**
     * Creation datetime in ISO8601 format
     * @type {Date}
     * @memberof MTNP2PInstruction
     */
    readonly createdDate?: Date;
    /**
     * Last updated datetime in ISO8601 format
     * @type {Date}
     * @memberof MTNP2PInstruction
     */
    readonly updatedDate?: Date;
}

/**
 * Check if a given object implements the MTNP2PInstruction interface.
 */
export function instanceOfMTNP2PInstruction(value: object): boolean {
    return true;
}

export function MTNP2PInstructionFromJSON(json: any): MTNP2PInstruction {
    return MTNP2PInstructionFromJSONTyped(json, false);
}

export function MTNP2PInstructionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MTNP2PInstruction {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['requestType'] === 'ALIAS_RESOLUTION') {
            return MTNAccountResolutionP2PInstructionFromJSONTyped(json, true);
        }
        if (json['requestType'] === 'ATTESTATION') {
            return MTNAttestationP2PInstructionFromJSONTyped(json, true);
        }
    }
    return {
        
        'requestType': json['requestType'] == null ? undefined : json['requestType'],
        'instructionId': json['instructionId'] == null ? undefined : json['instructionId'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'status': json['status'] == null ? undefined : json['status'],
        'statusReasonInformation': json['statusReasonInformation'] == null ? undefined : ((json['statusReasonInformation'] as Array<any>).map(MTNStatusReasonInformationFromJSON)),
        'blockchainTxnHash': json['blockchainTxnHash'] == null ? undefined : json['blockchainTxnHash'],
        'travelRuleExchangeId': json['travelRuleExchangeId'] == null ? undefined : json['travelRuleExchangeId'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'updatedDate': json['updatedDate'] == null ? undefined : (new Date(json['updatedDate'])),
    };
}

export function MTNP2PInstructionToJSON(value?: Omit<MTNP2PInstruction, 'travelRuleExchangeId'|'createdDate'|'updatedDate'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'requestType': value['requestType'],
        'instructionId': value['instructionId'],
        'quantity': value['quantity'],
        'status': value['status'],
        'statusReasonInformation': value['statusReasonInformation'] == null ? undefined : ((value['statusReasonInformation'] as Array<any>).map(MTNStatusReasonInformationToJSON)),
        'blockchainTxnHash': value['blockchainTxnHash'],
    };
}

