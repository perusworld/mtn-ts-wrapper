/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MTNDateAndPlaceOfBirth } from './MTNDateAndPlaceOfBirth';
import {
    MTNDateAndPlaceOfBirthFromJSON,
    MTNDateAndPlaceOfBirthFromJSONTyped,
    MTNDateAndPlaceOfBirthToJSON,
} from './MTNDateAndPlaceOfBirth';
import type { MTNGeographicAddress } from './MTNGeographicAddress';
import {
    MTNGeographicAddressFromJSON,
    MTNGeographicAddressFromJSONTyped,
    MTNGeographicAddressToJSON,
} from './MTNGeographicAddress';
import type { MTNNationalIdentification } from './MTNNationalIdentification';
import {
    MTNNationalIdentificationFromJSON,
    MTNNationalIdentificationFromJSONTyped,
    MTNNationalIdentificationToJSON,
} from './MTNNationalIdentification';
import type { MTNNaturalPerson } from './MTNNaturalPerson';
import {
    MTNNaturalPersonFromJSON,
    MTNNaturalPersonFromJSONTyped,
    MTNNaturalPersonToJSON,
} from './MTNNaturalPerson';

/**
 * 
 * @export
 * @interface MTNPerson
 */
export interface MTNPerson {
    /**
     * 
     * @type {MTNNaturalPerson}
     * @memberof MTNPerson
     */
    naturalPerson?: MTNNaturalPerson;
    /**
     * 
     * @type {Array<MTNGeographicAddress>}
     * @memberof MTNPerson
     */
    geographicAddresses?: Array<MTNGeographicAddress>;
    /**
     * 
     * @type {MTNNationalIdentification}
     * @memberof MTNPerson
     */
    nationalIdentification?: MTNNationalIdentification;
    /**
     * 
     * @type {MTNDateAndPlaceOfBirth}
     * @memberof MTNPerson
     */
    dateAndPlaceOfBirth?: MTNDateAndPlaceOfBirth;
    /**
     * Country code of given person's current residence.
     * @type {string}
     * @memberof MTNPerson
     */
    countryOfResidence?: string;
}

/**
 * Check if a given object implements the MTNPerson interface.
 */
export function instanceOfMTNPerson(value: object): boolean {
    return true;
}

export function MTNPersonFromJSON(json: any): MTNPerson {
    return MTNPersonFromJSONTyped(json, false);
}

export function MTNPersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): MTNPerson {
    if (json == null) {
        return json;
    }
    return {
        
        'naturalPerson': json['naturalPerson'] == null ? undefined : MTNNaturalPersonFromJSON(json['naturalPerson']),
        'geographicAddresses': json['geographicAddresses'] == null ? undefined : ((json['geographicAddresses'] as Array<any>).map(MTNGeographicAddressFromJSON)),
        'nationalIdentification': json['nationalIdentification'] == null ? undefined : MTNNationalIdentificationFromJSON(json['nationalIdentification']),
        'dateAndPlaceOfBirth': json['dateAndPlaceOfBirth'] == null ? undefined : MTNDateAndPlaceOfBirthFromJSON(json['dateAndPlaceOfBirth']),
        'countryOfResidence': json['countryOfResidence'] == null ? undefined : json['countryOfResidence'],
    };
}

export function MTNPersonToJSON(value?: MTNPerson | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'naturalPerson': MTNNaturalPersonToJSON(value['naturalPerson']),
        'geographicAddresses': value['geographicAddresses'] == null ? undefined : ((value['geographicAddresses'] as Array<any>).map(MTNGeographicAddressToJSON)),
        'nationalIdentification': MTNNationalIdentificationToJSON(value['nationalIdentification']),
        'dateAndPlaceOfBirth': MTNDateAndPlaceOfBirthToJSON(value['dateAndPlaceOfBirth']),
        'countryOfResidence': value['countryOfResidence'],
    };
}

