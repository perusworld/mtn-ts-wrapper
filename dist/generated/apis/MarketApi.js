"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class MarketApi extends runtime.BaseAPI {
    /**
     * This endpoint allows retrieving Historical prices.
     * Retrieve Historical prices.
     */
    getHistoricalPricesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling getHistoricalPrices().');
            }
            if (requestParameters['historicalPricesFilter'] == null) {
                throw new runtime.RequiredError('historicalPricesFilter', 'Required parameter "historicalPricesFilter" was null or undefined when calling getHistoricalPrices().');
            }
            const queryParameters = {};
            if (requestParameters['historicalPricesFilter'] != null) {
                queryParameters['historical_prices_filter'] = requestParameters['historicalPricesFilter'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/customers/{ica}/historical-prices`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNHistoricalPricesFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows retrieving Historical prices.
     * Retrieve Historical prices.
     */
    getHistoricalPrices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHistoricalPricesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint allows retrieving prices for one or more markets.
     * Retrieve prices.
     */
    getPricesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling getPrices().');
            }
            const queryParameters = {};
            if (requestParameters['asset'] != null) {
                queryParameters['asset'] = requestParameters['asset'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/customers/{ica}/prices`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.MTNPriceFromJSON));
        });
    }
    /**
     * This endpoint allows retrieving prices for one or more markets.
     * Retrieve prices.
     */
    getPrices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPricesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint fetches latest quote for given currency and further criteria.
     * Retrieve latest quote.
     */
    getQuotesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling getQuotes().');
            }
            if (requestParameters['quoteFilter'] == null) {
                throw new runtime.RequiredError('quoteFilter', 'Required parameter "quoteFilter" was null or undefined when calling getQuotes().');
            }
            const queryParameters = {};
            if (requestParameters['quoteFilter'] != null) {
                queryParameters['quote_filter'] = requestParameters['quoteFilter'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/customers/{ica}/quotes`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNQuoteFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint fetches latest quote for given currency and further criteria.
     * Retrieve latest quote.
     */
    getQuotes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getQuotesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.MarketApi = MarketApi;
//# sourceMappingURL=MarketApi.js.map