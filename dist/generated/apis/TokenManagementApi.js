"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenManagementApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class TokenManagementApi extends runtime.BaseAPI {
    /**
     * This endpoint allows a consumer to retrieve the token balance for any crypto address or total supply of tokens. Request is expected to be encrypted.
     * Retrieve token balance.
     */
    getBalancesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling getBalances().');
            }
            if (requestParameters['mTNTokenBalance'] == null) {
                throw new runtime.RequiredError('mTNTokenBalance', 'Required parameter "mTNTokenBalance" was null or undefined when calling getBalances().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/token-balances`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNTokenBalanceToJSON)(requestParameters['mTNTokenBalance']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNTokenBalanceFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows a consumer to retrieve the token balance for any crypto address or total supply of tokens. Request is expected to be encrypted.
     * Retrieve token balance.
     */
    getBalances(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBalancesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint allows a consumer to retrieve details of a token operation. Response is expected to be encrypted.
     * Retrieve details of token operation.
     */
    getOperationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling getOperation().');
            }
            if (requestParameters['operationId'] == null) {
                throw new runtime.RequiredError('operationId', 'Required parameter "operationId" was null or undefined when calling getOperation().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/customers/{ica}/token-operations/{operation_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"operation_id"}}`, encodeURIComponent(String(requestParameters['operationId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNTokenOperationFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows a consumer to retrieve details of a token operation. Response is expected to be encrypted.
     * Retrieve details of token operation.
     */
    getOperation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOperationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint allows a consumer to submit an operation to either mint, transfer or burn tokens. Request and response are expected to be encrypted.
     * Submit token operation.
     */
    submitOperationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling submitOperation().');
            }
            if (requestParameters['idempotencyKey'] == null) {
                throw new runtime.RequiredError('idempotencyKey', 'Required parameter "idempotencyKey" was null or undefined when calling submitOperation().');
            }
            if (requestParameters['mTNTokenOperation'] == null) {
                throw new runtime.RequiredError('mTNTokenOperation', 'Required parameter "mTNTokenOperation" was null or undefined when calling submitOperation().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['idempotencyKey'] != null) {
                headerParameters['Idempotency-Key'] = String(requestParameters['idempotencyKey']);
            }
            const response = yield this.request({
                path: `/customers/{ica}/token-operations`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WrappedMTNTokenOperationToJSON)(requestParameters['mTNTokenOperation']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNTokenOperationFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows a consumer to submit an operation to either mint, transfer or burn tokens. Request and response are expected to be encrypted.
     * Submit token operation.
     */
    submitOperation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.submitOperationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.TokenManagementApi = TokenManagementApi;
//# sourceMappingURL=TokenManagementApi.js.map