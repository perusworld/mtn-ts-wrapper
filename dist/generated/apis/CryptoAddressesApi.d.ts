/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { MTNCryptoAddress } from '../models/index';
export interface AddCryptoAddressRequest {
    ica: string;
    mTNCryptoAddress: Omit<MTNCryptoAddress, 'cryptoAddressId' | 'status' | 'createdDate' | 'updatedDate'>;
}
export interface DecommissionCryptoAddressRequest {
    ica: string;
    cryptoAddressId: string;
}
export interface GetCryptoAddressRequest {
    ica: string;
    cryptoAddressId: string;
}
export interface UpdateCryptoAddressRequest {
    ica: string;
    cryptoAddressId: string;
    mTNCryptoAddress: Omit<MTNCryptoAddress, 'cryptoAddressId' | 'status' | 'createdDate' | 'updatedDate'>;
}
/**
 *
 */
export declare class CryptoAddressesApi extends runtime.BaseAPI {
    /**
     * This endpoint allows for adding a preferred crypto address for a given account alias. Request and response are expected to be encrypted.
     * Adds a preferred crypto address for an account.
     */
    addCryptoAddressRaw(requestParameters: AddCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNCryptoAddress>>;
    /**
     * This endpoint allows for adding a preferred crypto address for a given account alias. Request and response are expected to be encrypted.
     * Adds a preferred crypto address for an account.
     */
    addCryptoAddress(requestParameters: AddCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNCryptoAddress>;
    /**
     * This endpoint allows for decommissioning a crypto address.
     * Decommissions a crypto address.
     */
    decommissionCryptoAddressRaw(requestParameters: DecommissionCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * This endpoint allows for decommissioning a crypto address.
     * Decommissions a crypto address.
     */
    decommissionCryptoAddress(requestParameters: DecommissionCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * This endpoint allows for getting details of a crypto address. Response is expected to be encrypted.
     * Gets a crypto address.
     */
    getCryptoAddressRaw(requestParameters: GetCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MTNCryptoAddress>>;
    /**
     * This endpoint allows for getting details of a crypto address. Response is expected to be encrypted.
     * Gets a crypto address.
     */
    getCryptoAddress(requestParameters: GetCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MTNCryptoAddress>;
    /**
     * This endpoint allows for updating a crypto address. Request is expected to be encrypted.
     * Updates a crypto address.
     */
    updateCryptoAddressRaw(requestParameters: UpdateCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * This endpoint allows for updating a crypto address. Request is expected to be encrypted.
     * Updates a crypto address.
     */
    updateCryptoAddress(requestParameters: UpdateCryptoAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
