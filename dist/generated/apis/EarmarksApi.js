"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EarmarksApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class EarmarksApi extends runtime.BaseAPI {
    /**
     * This endpoint allows for retrieving details on existing earmarks from Crypto Source. The response is expected to be encrypted.
     * Retrieve earmarks details
     */
    earmarkSearchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling earmarkSearch().');
            }
            const queryParameters = {};
            if (requestParameters['offset'] != null) {
                queryParameters['offset'] = requestParameters['offset'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['status'] != null) {
                queryParameters['status'] = requestParameters['status'];
            }
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['type'] != null) {
                queryParameters['type'] = requestParameters['type'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/customers/{ica}/earmarks`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNEarmarksFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows for retrieving details on existing earmarks from Crypto Source. The response is expected to be encrypted.
     * Retrieve earmarks details
     */
    earmarkSearch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.earmarkSearchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint allows for retrieving details of an earmark by using EarmarkId. The response is expected to be encrypted.
     * Retrieve an earmark by using earmarkId
     */
    getEarmarkRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling getEarmark().');
            }
            if (requestParameters['earmarkId'] == null) {
                throw new runtime.RequiredError('earmarkId', 'Required parameter "earmarkId" was null or undefined when calling getEarmark().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/customers/{ica}/earmarks/{earmark_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNEarmarkFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows for retrieving details of an earmark by using EarmarkId. The response is expected to be encrypted.
     * Retrieve an earmark by using earmarkId
     */
    getEarmark(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEarmarkRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint allows for creating an earmark. Request and response are expected to be encrypted.
     * Creates an Earmark request
     */
    postEarmarkRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling postEarmark().');
            }
            if (requestParameters['mTNEarmark'] == null) {
                throw new runtime.RequiredError('mTNEarmark', 'Required parameter "mTNEarmark" was null or undefined when calling postEarmark().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/earmarks`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNEarmarkToJSON)(requestParameters['mTNEarmark']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNEarmarkFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows for creating an earmark. Request and response are expected to be encrypted.
     * Creates an Earmark request
     */
    postEarmark(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postEarmarkRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Endpoint to update an earmark. Request is expected to be encrypted.
     * Update an earmark
     */
    updateEarmarkRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling updateEarmark().');
            }
            if (requestParameters['earmarkId'] == null) {
                throw new runtime.RequiredError('earmarkId', 'Required parameter "earmarkId" was null or undefined when calling updateEarmark().');
            }
            if (requestParameters['mTNEarmark'] == null) {
                throw new runtime.RequiredError('mTNEarmark', 'Required parameter "mTNEarmark" was null or undefined when calling updateEarmark().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/earmarks/{earmark_id}`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNEarmarkToJSON)(requestParameters['mTNEarmark']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Endpoint to update an earmark. Request is expected to be encrypted.
     * Update an earmark
     */
    updateEarmark(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateEarmarkRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This endpoint allows you to cancel an earmark with a status reason and a status description. Request is expected to be encrypted.
     * Request to cancel an earmark
     */
    updateEarmarkForCancelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling updateEarmarkForCancel().');
            }
            if (requestParameters['earmarkId'] == null) {
                throw new runtime.RequiredError('earmarkId', 'Required parameter "earmarkId" was null or undefined when calling updateEarmarkForCancel().');
            }
            if (requestParameters['mTNEarmark'] == null) {
                throw new runtime.RequiredError('mTNEarmark', 'Required parameter "mTNEarmark" was null or undefined when calling updateEarmarkForCancel().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/earmarks/{earmark_id}/cancel`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNEarmarkToJSON)(requestParameters['mTNEarmark']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This endpoint allows you to cancel an earmark with a status reason and a status description. Request is expected to be encrypted.
     * Request to cancel an earmark
     */
    updateEarmarkForCancel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateEarmarkForCancelRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Endpoint to update deposit with payer\'s account alias and request amount. Request is expected to be encrypted.
     * Deposit funds for an Earmark.
     */
    updateEarmarkForDepositsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling updateEarmarkForDeposits().');
            }
            if (requestParameters['earmarkId'] == null) {
                throw new runtime.RequiredError('earmarkId', 'Required parameter "earmarkId" was null or undefined when calling updateEarmarkForDeposits().');
            }
            if (requestParameters['mTNPayer'] == null) {
                throw new runtime.RequiredError('mTNPayer', 'Required parameter "mTNPayer" was null or undefined when calling updateEarmarkForDeposits().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/earmarks/{earmark_id}/deposits`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNPayerToJSON)(requestParameters['mTNPayer']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Endpoint to update deposit with payer\'s account alias and request amount. Request is expected to be encrypted.
     * Deposit funds for an Earmark.
     */
    updateEarmarkForDeposits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateEarmarkForDepositsRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This endpoint allows you to release an earmark by providing reason code and description. Request is expected to be encrypted.
     * Request to release funds for an earmark
     */
    updateEarmarkForReleaseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling updateEarmarkForRelease().');
            }
            if (requestParameters['earmarkId'] == null) {
                throw new runtime.RequiredError('earmarkId', 'Required parameter "earmarkId" was null or undefined when calling updateEarmarkForRelease().');
            }
            if (requestParameters['mTNEarmark'] == null) {
                throw new runtime.RequiredError('mTNEarmark', 'Required parameter "mTNEarmark" was null or undefined when calling updateEarmarkForRelease().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/earmarks/{earmark_id}/release`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))).replace(`{${"earmark_id"}}`, encodeURIComponent(String(requestParameters['earmarkId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNEarmarkToJSON)(requestParameters['mTNEarmark']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This endpoint allows you to release an earmark by providing reason code and description. Request is expected to be encrypted.
     * Request to release funds for an earmark
     */
    updateEarmarkForRelease(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateEarmarkForReleaseRaw(requestParameters, initOverrides);
        });
    }
}
exports.EarmarksApi = EarmarksApi;
//# sourceMappingURL=EarmarksApi.js.map