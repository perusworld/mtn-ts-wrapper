"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class AccountsApi extends runtime.BaseAPI {
    /**
     * This endpoint allows a financial institution and virtual asset service providers (VASP) to register its consumer accounts in Crypto Source. Request and response are expected to be encrypted.
     * Register a new consumer account identity.
     */
    accountPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling accountPost().');
            }
            if (requestParameters['mTNAccount'] == null) {
                throw new runtime.RequiredError('mTNAccount', 'Required parameter "mTNAccount" was null or undefined when calling accountPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/accounts`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNAccountToJSON)(requestParameters['mTNAccount']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MTNAccountFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint allows a financial institution and virtual asset service providers (VASP) to register its consumer accounts in Crypto Source. Request and response are expected to be encrypted.
     * Register a new consumer account identity.
     */
    accountPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.accountPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint allows for retrieving details on an existing account from Crypto Source. Request and response are expected to be encrypted.
     * Search for an account\'s details.
     */
    accountSearchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling accountSearch().');
            }
            if (requestParameters['mTNAccountSearch'] == null) {
                throw new runtime.RequiredError('mTNAccountSearch', 'Required parameter "mTNAccountSearch" was null or undefined when calling accountSearch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/accounts/searches`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNAccountSearchToJSON)(requestParameters['mTNAccountSearch']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.MTNAccountFromJSON));
        });
    }
    /**
     * This endpoint allows for retrieving details on an existing account from Crypto Source. Request and response are expected to be encrypted.
     * Search for an account\'s details.
     */
    accountSearch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.accountSearchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint allows for updating the account status of a given account alias. Request is expected to be encrypted.
     * Updates an account.
     */
    accountUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['ica'] == null) {
                throw new runtime.RequiredError('ica', 'Required parameter "ica" was null or undefined when calling accountUpdate().');
            }
            if (requestParameters['mTNAccount'] == null) {
                throw new runtime.RequiredError('mTNAccount', 'Required parameter "mTNAccount" was null or undefined when calling accountUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/customers/{ica}/accounts`.replace(`{${"ica"}}`, encodeURIComponent(String(requestParameters['ica']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MTNAccountToJSON)(requestParameters['mTNAccount']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This endpoint allows for updating the account status of a given account alias. Request is expected to be encrypted.
     * Updates an account.
     */
    accountUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.accountUpdateRaw(requestParameters, initOverrides);
        });
    }
}
exports.AccountsApi = AccountsApi;
//# sourceMappingURL=AccountsApi.js.map