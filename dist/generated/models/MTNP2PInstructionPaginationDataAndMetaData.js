"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MTNP2PInstructionPaginationDataAndMetaDataToJSON = exports.MTNP2PInstructionPaginationDataAndMetaDataFromJSONTyped = exports.MTNP2PInstructionPaginationDataAndMetaDataFromJSON = exports.instanceOfMTNP2PInstructionPaginationDataAndMetaData = void 0;
const MTNP2PInstruction_1 = require("./MTNP2PInstruction");
/**
 * Check if a given object implements the MTNP2PInstructionPaginationDataAndMetaData interface.
 */
function instanceOfMTNP2PInstructionPaginationDataAndMetaData(value) {
    return true;
}
exports.instanceOfMTNP2PInstructionPaginationDataAndMetaData = instanceOfMTNP2PInstructionPaginationDataAndMetaData;
function MTNP2PInstructionPaginationDataAndMetaDataFromJSON(json) {
    return MTNP2PInstructionPaginationDataAndMetaDataFromJSONTyped(json, false);
}
exports.MTNP2PInstructionPaginationDataAndMetaDataFromJSON = MTNP2PInstructionPaginationDataAndMetaDataFromJSON;
function MTNP2PInstructionPaginationDataAndMetaDataFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'offset': json['offset'] == null ? undefined : json['offset'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'count': json['count'] == null ? undefined : json['count'],
        'total': json['total'] == null ? undefined : json['total'],
        'items': json['items'] == null ? undefined : (json['items'].map(MTNP2PInstruction_1.MTNP2PInstructionFromJSON)),
    };
}
exports.MTNP2PInstructionPaginationDataAndMetaDataFromJSONTyped = MTNP2PInstructionPaginationDataAndMetaDataFromJSONTyped;
function MTNP2PInstructionPaginationDataAndMetaDataToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'offset': value['offset'],
        'limit': value['limit'],
        'count': value['count'],
        'total': value['total'],
        'items': value['items'] == null ? undefined : (value['items'].map(MTNP2PInstruction_1.MTNP2PInstructionToJSON)),
    };
}
exports.MTNP2PInstructionPaginationDataAndMetaDataToJSON = MTNP2PInstructionPaginationDataAndMetaDataToJSON;
//# sourceMappingURL=MTNP2PInstructionPaginationDataAndMetaData.js.map