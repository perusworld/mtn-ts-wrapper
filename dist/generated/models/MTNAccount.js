"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MTNAccountToJSON = exports.MTNAccountFromJSONTyped = exports.MTNAccountFromJSON = exports.instanceOfMTNAccount = void 0;
const MTNAssetBalance_1 = require("./MTNAssetBalance");
const MTNCryptoAddress_1 = require("./MTNCryptoAddress");
const MTNStatusReasonInformation_1 = require("./MTNStatusReasonInformation");
/**
 * Check if a given object implements the MTNAccount interface.
 */
function instanceOfMTNAccount(value) {
    if (!('accountAlias' in value))
        return false;
    return true;
}
exports.instanceOfMTNAccount = instanceOfMTNAccount;
function MTNAccountFromJSON(json) {
    return MTNAccountFromJSONTyped(json, false);
}
exports.MTNAccountFromJSON = MTNAccountFromJSON;
function MTNAccountFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'accountAlias': json['accountAlias'],
        'status': json['status'] == null ? undefined : json['status'],
        'statusReasonInformation': json['statusReasonInformation'] == null ? undefined : (json['statusReasonInformation'].map(MTNStatusReasonInformation_1.MTNStatusReasonInformationFromJSON)),
        'balances': json['balances'] == null ? undefined : (json['balances'].map(MTNAssetBalance_1.MTNAssetBalanceFromJSON)),
        'cryptoAddresses': json['cryptoAddresses'] == null ? undefined : (json['cryptoAddresses'].map(MTNCryptoAddress_1.MTNCryptoAddressFromJSON)),
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'updatedDate': json['updatedDate'] == null ? undefined : (new Date(json['updatedDate'])),
    };
}
exports.MTNAccountFromJSONTyped = MTNAccountFromJSONTyped;
function MTNAccountToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'accountAlias': value['accountAlias'],
        'status': value['status'],
        'statusReasonInformation': value['statusReasonInformation'] == null ? undefined : (value['statusReasonInformation'].map(MTNStatusReasonInformation_1.MTNStatusReasonInformationToJSON)),
    };
}
exports.MTNAccountToJSON = MTNAccountToJSON;
//# sourceMappingURL=MTNAccount.js.map