"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MTNTokenizedBurnOperationToJSON = exports.MTNTokenizedBurnOperationFromJSONTyped = exports.MTNTokenizedBurnOperationFromJSON = exports.instanceOfMTNTokenizedBurnOperation = void 0;
const MTNBlockchainTransaction_1 = require("./MTNBlockchainTransaction");
const MTNTokenIdentifier_1 = require("./MTNTokenIdentifier");
/**
 * Check if a given object implements the MTNTokenizedBurnOperation interface.
 */
function instanceOfMTNTokenizedBurnOperation(value) {
    if (!('amount' in value))
        return false;
    if (!('from' in value))
        return false;
    if (!('tokenIdentifier' in value))
        return false;
    return true;
}
exports.instanceOfMTNTokenizedBurnOperation = instanceOfMTNTokenizedBurnOperation;
function MTNTokenizedBurnOperationFromJSON(json) {
    return MTNTokenizedBurnOperationFromJSONTyped(json, false);
}
exports.MTNTokenizedBurnOperationFromJSON = MTNTokenizedBurnOperationFromJSON;
function MTNTokenizedBurnOperationFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'amount': json['amount'],
        'from': json['from'],
        'tokenIdentifier': (0, MTNTokenIdentifier_1.MTNTokenIdentifierFromJSON)(json['tokenIdentifier']),
        'operationId': json['operationId'] == null ? undefined : json['operationId'],
        'status': json['status'] == null ? undefined : json['status'],
        'blockchainTransactions': json['blockchainTransactions'] == null ? undefined : (json['blockchainTransactions'].map(MTNBlockchainTransaction_1.MTNBlockchainTransactionFromJSON)),
    };
}
exports.MTNTokenizedBurnOperationFromJSONTyped = MTNTokenizedBurnOperationFromJSONTyped;
function MTNTokenizedBurnOperationToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'amount': value['amount'],
        'from': value['from'],
        'tokenIdentifier': (0, MTNTokenIdentifier_1.MTNTokenIdentifierToJSON)(value['tokenIdentifier']),
    };
}
exports.MTNTokenizedBurnOperationToJSON = MTNTokenizedBurnOperationToJSON;
//# sourceMappingURL=MTNTokenizedBurnOperation.js.map