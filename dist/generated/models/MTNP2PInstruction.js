"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mastercard Multi Token Network API
 * MTN (Multi Token Network) API is for customers and their consumers to - create account - buy/sell/hold cryptos - resolve alias and addresses - mint/transfer/burn tokenized deposits on blockchain
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MTNP2PInstructionToJSON = exports.MTNP2PInstructionFromJSONTyped = exports.MTNP2PInstructionFromJSON = exports.instanceOfMTNP2PInstruction = void 0;
const MTNStatusReasonInformation_1 = require("./MTNStatusReasonInformation");
const index_1 = require("./index");
/**
 * Check if a given object implements the MTNP2PInstruction interface.
 */
function instanceOfMTNP2PInstruction(value) {
    return true;
}
exports.instanceOfMTNP2PInstruction = instanceOfMTNP2PInstruction;
function MTNP2PInstructionFromJSON(json) {
    return MTNP2PInstructionFromJSONTyped(json, false);
}
exports.MTNP2PInstructionFromJSON = MTNP2PInstructionFromJSON;
function MTNP2PInstructionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['requestType'] === 'ALIAS_RESOLUTION') {
            return (0, index_1.MTNAccountResolutionP2PInstructionFromJSONTyped)(json, true);
        }
        if (json['requestType'] === 'ATTESTATION') {
            return (0, index_1.MTNAttestationP2PInstructionFromJSONTyped)(json, true);
        }
    }
    return {
        'requestType': json['requestType'] == null ? undefined : json['requestType'],
        'instructionId': json['instructionId'] == null ? undefined : json['instructionId'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'status': json['status'] == null ? undefined : json['status'],
        'statusReasonInformation': json['statusReasonInformation'] == null ? undefined : (json['statusReasonInformation'].map(MTNStatusReasonInformation_1.MTNStatusReasonInformationFromJSON)),
        'blockchainTxnHash': json['blockchainTxnHash'] == null ? undefined : json['blockchainTxnHash'],
        'travelRuleExchangeId': json['travelRuleExchangeId'] == null ? undefined : json['travelRuleExchangeId'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'updatedDate': json['updatedDate'] == null ? undefined : (new Date(json['updatedDate'])),
    };
}
exports.MTNP2PInstructionFromJSONTyped = MTNP2PInstructionFromJSONTyped;
function MTNP2PInstructionToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'requestType': value['requestType'],
        'instructionId': value['instructionId'],
        'quantity': value['quantity'],
        'status': value['status'],
        'statusReasonInformation': value['statusReasonInformation'] == null ? undefined : (value['statusReasonInformation'].map(MTNStatusReasonInformation_1.MTNStatusReasonInformationToJSON)),
        'blockchainTxnHash': value['blockchainTxnHash'],
    };
}
exports.MTNP2PInstructionToJSON = MTNP2PInstructionToJSON;
//# sourceMappingURL=MTNP2PInstruction.js.map